import { useState, useEffect, useCallback } from 'react';
import { useToast } from '@/components/ui/use-toast';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { X, Upload, PlusCircle, Download, FileText, Trash2, Pencil } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { api } from '@/api';

type RuleSeverity = 'low' | 'medium' | 'high';

interface BusinessRule {
  id: string;
  dataset_id: string;
  name: string;
  description: string;
  condition: string;
  message: string;
  severity: RuleSeverity;
  active: boolean;
  created_at: string;
  updated_at: string;
  model_generated?: boolean;
  field?: string;
  source?: string;
  model?: string;
}

interface BusinessRulesProps {
  datasetId?: string;
  rules?: BusinessRule[];
  onRulesUpdate?: (rules: BusinessRule[]) => void;
}

const BusinessRules: React.FC<BusinessRulesProps> = ({
  datasetId = '',
  rules: externalRules = [],
  onRulesUpdate,
}) => {
  const { toast } = useToast();
  const [rules, setRules] = useState<BusinessRule[]>(externalRules);
  const [isLoading, setIsLoading] = useState(false);
  const [showAddRuleDialog, setShowAddRuleDialog] = useState(false);
  const [editingRule, setEditingRule] = useState<BusinessRule | null>(null);
  const [deleteRule, setDeleteRule] = useState<BusinessRule | null>(null);
  
  // Form state for new/editing rule
  const [ruleForm, setRuleForm] = useState<Omit<BusinessRule, 'id' | 'dataset_id' | 'created_at' | 'updated_at'>>({
    name: '',
    description: '',
    condition: '',
    message: '',
    severity: 'medium',
    active: true,
  });

  // Update local state when external rules change
  useEffect(() => {
    setRules(externalRules);
  }, [externalRules]);

  // Handle rules update
  const handleRulesUpdate = useCallback((updatedRules: BusinessRule[]) => {
    setRules(updatedRules);
    onRulesUpdate?.(updatedRules);
  }, [onRulesUpdate]);

  // Handle form input changes
  const handleInputChange = (field: keyof typeof ruleForm, value: string | boolean) => {
    setRuleForm(prev => ({
      ...prev,
      [field]: value,
    }));
  };

  // Reset form
  const resetForm = () => {
    setRuleForm({
      name: '',
      description: '',
      condition: '',
      message: '',
      severity: 'medium',
      active: true,
    });
    setEditingRule(null);
  };

  // Save rule (create or update)
  const saveRule = async () => {
    if (!ruleForm.name || !ruleForm.condition) {
      toast({
        title: 'Error',
        description: 'Name and condition are required fields',
        variant: 'destructive',
      });
      return;
    }

    try {
      setIsLoading(true);
      let response;
      
      if (editingRule) {
        // Update existing rule
        response = await api.businessRules.update(editingRule.id, {
          ...ruleForm,
          id: editingRule.id,
          dataset_id: datasetId,
        });
        
        const updatedRules = rules.map(rule => 
          rule.id === editingRule.id ? response.data : rule
        );
        handleRulesUpdate(updatedRules);
      } else {
        // Create new rule
        response = await api.businessRules.create({
          ...ruleForm,
          dataset_id: datasetId,
        });
        handleRulesUpdate([...rules, response.data]);
      }

      toast({
        title: 'Success',
        description: `Rule ${editingRule ? 'updated' : 'created'} successfully`,
      });
      
      setShowAddRuleDialog(false);
      resetForm();
    } catch (error) {
      console.error('Error saving rule:', error);
      toast({
        title: 'Error',
        description: `Failed to ${editingRule ? 'update' : 'create'} rule`,
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Handle delete rule
  const confirmDelete = async () => {
    if (!deleteRule) return;

    try {
      setIsLoading(true);
      await api.businessRules.delete(deleteRule.id);
      
      const updatedRules = rules.filter(rule => rule.id !== deleteRule.id);
      handleRulesUpdate(updatedRules);
      
      toast({
        title: 'Success',
        description: 'Rule deleted successfully',
      });
    } catch (error) {
      console.error('Error deleting rule:', error);
      toast({
        title: 'Error',
        description: 'Failed to delete rule',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
      setDeleteRule(null);
    }
  };

  // Toggle rule active status
  const toggleRuleActive = async (rule: BusinessRule) => {
    try {
      setIsLoading(true);
      const updatedRule = { ...rule, active: !rule.active };
      const response = await api.businessRules.update(rule.id, updatedRule);
      
      const updatedRules = rules.map(r => 
        r.id === rule.id ? response.data : r
      );
      handleRulesUpdate(updatedRules);
    } catch (error) {
      console.error('Error toggling rule status:', error);
      toast({
        title: 'Error',
        description: 'Failed to update rule status',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Handle rule import
  const handleImport = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    try {
      setIsLoading(true);
      const content = await file.text();
      const importedRules = JSON.parse(content);

      if (!Array.isArray(importedRules)) {
        throw new Error('Invalid file format. Expected an array of rules.');
      }

      const validRules = importedRules.filter((rule: any) => 
        rule.name && rule.condition && rule.severity && typeof rule.active === 'boolean'
      ) as BusinessRule[];

      if (validRules.length === 0) {
        throw new Error('No valid rules found in the file.');
      }

      // Add dataset_id to each rule
      const rulesWithDataset = validRules.map(rule => ({
        ...rule,
        dataset_id: datasetId,
      }));

      // Save rules to the server
      const response = await api.businessRules.saveBusinessRules(datasetId, rulesWithDataset);
      
      // Update local state
      handleRulesUpdate([...rules, ...response.data]);

      toast({
        title: 'Import successful',
        description: `Successfully imported ${response.data.length} rule(s)`,
      });

      // Reset file input
      event.target.value = '';
    } catch (error) {
      console.error('Error importing rules:', error);
      toast({
        title: 'Import failed',
        description: error instanceof Error ? error.message : 'Failed to import rules',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Handle rule export
  const handleExport = () => {
    if (rules.length === 0) {
      toast({
        title: 'No rules to export',
        description: 'There are no rules to export.',
      });
      return;
    }

    try {
      const data = JSON.stringify(rules, null, 2);
      const blob = new Blob([data], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      
      const a = document.createElement('a');
      a.href = url;
      a.download = `business-rules-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      toast({
        title: 'Export successful',
        description: `Exported ${rules.length} rule(s)`,
      });
    } catch (error) {
      console.error('Error exporting rules:', error);
      toast({
        title: 'Export failed',
        description: 'Failed to export rules. Please try again.',
        variant: 'destructive',
      });
    }
  };

  // Open edit dialog with rule data
  const openEditDialog = (rule: BusinessRule) => {
    setEditingRule(rule);
    setRuleForm({
      name: rule.name,
      description: rule.description,
      condition: rule.condition,
      message: rule.message,
      severity: rule.severity,
      active: rule.active,
    });
    setShowAddRuleDialog(true);
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Business Rules</h2>
        <div className="flex space-x-2">
          <Button onClick={() => setShowAddRuleDialog(true)}>
            <PlusCircle className="mr-2 h-4 w-4" />
            Add Rule
          </Button>
        </div>
      </div>

      <Tabs defaultValue="rules" className="w-full">
        <TabsList>
          <TabsTrigger value="rules">Rules</TabsTrigger>
          <TabsTrigger value="import">Import</TabsTrigger>
          <TabsTrigger value="export">Export</TabsTrigger>
        </TabsList>

        <TabsContent value="rules" className="space-y-4">
          {rules.length === 0 ? (
            <div className="text-center py-12 border-2 border-dashed rounded-lg">
              <FileText className="mx-auto h-12 w-12 text-muted-foreground" />
              <h3 className="mt-2 text-sm font-medium">No rules yet</h3>
              <p className="mt-1 text-sm text-muted-foreground">
                Get started by creating a new rule
              </p>
              <Button
                className="mt-4"
                onClick={() => setShowAddRuleDialog(true)}
              >
                <PlusCircle className="mr-2 h-4 w-4" />
                New Rule
              </Button>
            </div>
          ) : (
            <div className="space-y-4">
              {rules.map((rule) => (
                <div key={rule.id} className="border rounded-lg p-4">
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="font-medium">{rule.name}</h3>
                      <p className="text-sm text-muted-foreground">
                        {rule.description || 'No description'}
                      </p>
                    </div>
                    <div className="flex space-x-2">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => openEditDialog(rule)}
                      >
                        <Pencil className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => setDeleteRule(rule)}
                      >
                        <Trash2 className="h-4 w-4 text-destructive" />
                      </Button>
                    </div>
                  </div>
                  <div className="mt-2 text-sm">
                    <div className="flex items-center space-x-2">
                      <span className="font-medium">Condition:</span>
                      <code className="bg-muted px-2 py-1 rounded text-xs">
                        {rule.condition}
                      </code>
                    </div>
                    <div className="mt-1">
                      <span className="font-medium">Message:</span>{' '}
                      <span className="text-muted-foreground">{rule.message}</span>
                    </div>
                    <div className="mt-1 flex items-center">
                      <span className="font-medium">Status:</span>
                      <Badge
                        variant={rule.active ? 'default' : 'secondary'}
                        className="ml-2"
                      >
                        {rule.active ? 'Active' : 'Inactive'}
                      </Badge>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </TabsContent>

        <TabsContent value="import">
          <Card>
            <CardHeader>
              <CardTitle>Import Business Rules</CardTitle>
              <CardDescription>
                Upload a JSON file containing business rules
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="border-2 border-dashed border-muted-foreground/20 rounded-lg p-6 text-center">
                  <Upload className="mx-auto h-8 w-8 text-muted-foreground" />
                  <div className="mt-4 flex justify-center text-sm">
                    <Label
                      htmlFor="file-upload"
                      className="relative cursor-pointer rounded-md font-medium text-primary hover:text-primary/90"
                    >
                      <span>Upload a file</span>
                      <Input
                        id="file-upload"
                        name="file-upload"
                        type="file"
                        className="sr-only"
                        accept=".json"
                        onChange={handleImport}
                      />
                    </Label>
                    <p className="pl-1">or drag and drop</p>
                  </div>
                  <p className="text-xs text-muted-foreground mt-2">
                    JSON file up to 10MB
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="export">
          <Card>
            <CardHeader>
              <CardTitle>Export Business Rules</CardTitle>
              <CardDescription>
                Download all business rules as a JSON file
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="rounded-lg border p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="font-medium">Export Rules</h4>
                      <p className="text-sm text-muted-foreground">
                        Export all rules to a JSON file
                      </p>
                    </div>
                    <Button
                      onClick={handleExport}
                      disabled={rules.length === 0 || isLoading}
                    >
                      <Download className="mr-2 h-4 w-4" />
                      Export
                    </Button>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Add/Edit Rule Dialog */}
      <Dialog open={showAddRuleDialog} onOpenChange={setShowAddRuleDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>
              {editingRule ? 'Edit Business Rule' : 'Add New Business Rule'}
            </DialogTitle>
            <DialogDescription>
              {editingRule
                ? 'Update the details of this business rule.'
                : 'Create a new business rule to validate your data.'}
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4 py-2">
            <div className="space-y-2">
              <Label htmlFor="name">Rule Name</Label>
              <Input
                id="name"
                placeholder="Enter rule name"
                value={ruleForm.name}
                onChange={(e) => handleInputChange('name', e.target.value)}
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="description">Description (Optional)</Label>
              <Input
                id="description"
                placeholder="Enter description"
                value={ruleForm.description}
                onChange={(e) => handleInputChange('description', e.target.value)}
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="condition">Condition</Label>
              <Textarea
                id="condition"
                placeholder="Enter condition (e.g., value > 100)"
                value={ruleForm.condition}
                onChange={(e) => handleInputChange('condition', e.target.value)}
                className="font-mono text-sm"
                rows={3}
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="message">Error Message</Label>
              <Input
                id="message"
                placeholder="Enter error message"
                value={ruleForm.message}
                onChange={(e) => handleInputChange('message', e.target.value)}
              />
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="severity">Severity</Label>
                <Select
                  value={ruleForm.severity}
                  onValueChange={(value: RuleSeverity) => 
                    handleInputChange('severity', value)
                  }
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select severity" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="low">Low</SelectItem>
                    <SelectItem value="medium">Medium</SelectItem>
                    <SelectItem value="high">High</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div className="space-y-2">
                <Label>Status</Label>
                <div className="flex items-center space-x-2">
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id="active"
                      checked={ruleForm.active}
                      onChange={(e) => handleInputChange('active', e.target.checked)}
                      className="h-4 w-4 rounded border-gray-300 text-primary focus:ring-primary"
                    />
                    <Label htmlFor="active">Active</Label>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => {
                setShowAddRuleDialog(false);
                resetForm();
              }}
            >
              Cancel
            </Button>
            <Button onClick={saveRule} disabled={isLoading}>
              {isLoading ? 'Saving...' : editingRule ? 'Update Rule' : 'Create Rule'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Delete Confirmation Dialog */}
      <Dialog open={!!deleteRule} onOpenChange={(open) => !open && setDeleteRule(null)}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Delete Rule</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete this rule? This action cannot be undone.
            </DialogDescription>
          </DialogHeader>
          <div className="py-4">
            <p className="text-sm text-muted-foreground">
              Rule: <span className="font-medium">{deleteRule?.name}</span>
            </p>
          </div>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setDeleteRule(null)}
              disabled={isLoading}
            >
              Cancel
            </Button>
            <Button
              variant="destructive"
              onClick={confirmDelete}
              disabled={isLoading}
            >
              {isLoading ? 'Deleting...' : 'Delete'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default BusinessRules;
