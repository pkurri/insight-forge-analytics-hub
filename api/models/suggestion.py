from enum import Enum
from pydantic import BaseModel, Field
from typing import Dict, Any, List, Optional
from datetime import datetime


class SuggestionType(str, Enum):
    """Type of suggestion generated by the system."""
    DATA_QUALITY = "data_quality"
    INSIGHT = "insight"
    TRANSFORMATION = "transformation"
    ENRICHMENT = "enrichment"
    VISUALIZATION = "visualization"
    ANALYSIS = "analysis"
    CUSTOM = "custom"


class SuggestionStatus(str, Enum):
    """Status of a suggestion."""
    GENERATED = "generated"  # Initially generated by the system
    SELECTED = "selected"    # Selected by the user
    REJECTED = "rejected"    # Explicitly rejected by the user
    EXPIRED = "expired"      # No longer relevant or outdated


class SuggestionModel(BaseModel):
    """Model for a suggestion generated by the system."""
    id: Optional[int] = None
    dataset_id: int
    type: SuggestionType
    title: str
    description: str
    content: Dict[str, Any]  # Flexible JSON content based on suggestion type
    status: SuggestionStatus = SuggestionStatus.GENERATED
    confidence_score: float = 0.0
    metadata: Dict[str, Any] = Field(default_factory=dict)
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)
    selected_at: Optional[datetime] = None
    user_id: Optional[int] = None  # User who selected the suggestion

    class Config:
        orm_mode = True
