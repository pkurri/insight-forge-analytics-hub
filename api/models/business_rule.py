from sqlalchemy import Column, Integer, String, DateTime, Boolean, Float, ForeignKey
from sqlalchemy.orm import relationship
from datetime import datetime
from typing import List, Dict, Any, Optional

from db.connection import Base

class BusinessRule(Base):
    __tablename__ = "business_rules"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, nullable=False)
    description = Column(String, nullable=True)
    
    # Rule definition
    condition = Column(String, nullable=False)  # SQL-like or JSON condition
    action = Column(String, nullable=False)     # Action to take when condition is met
    severity = Column(String, nullable=False)   # high, medium, low
    message = Column(String, nullable=False)    # Message to display when rule is violated
    
    # Metadata
    rule_type = Column(String, nullable=False)  # validation, transformation, enrichment
    created_by = Column(Integer, ForeignKey("users.id"), nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    active = Column(Boolean, default=True)
    model_generated = Column(Boolean, default=False)  # Whether the rule was generated by AI
    
    # Rule application tracking
    execution_count = Column(Integer, default=0)
    last_executed = Column(DateTime, nullable=True)
    success_rate = Column(Float, default=0.0)
    
    # Relationships
    dataset_rules = relationship("DatasetRule", back_populates="rule")
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert rule to dictionary"""
        return {
            "id": self.id,
            "name": self.name,
            "description": self.description,
            "condition": self.condition,
            "action": self.action,
            "severity": self.severity,
            "message": self.message,
            "rule_type": self.rule_type,
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None,
            "active": self.active,
            "model_generated": self.model_generated,
            "execution_count": self.execution_count,
            "last_executed": self.last_executed.isoformat() if self.last_executed else None,
            "success_rate": self.success_rate
        }


class DatasetRule(Base):
    __tablename__ = "dataset_rules"
    
    dataset_id = Column(Integer, ForeignKey("datasets.id"), primary_key=True)
    rule_id = Column(Integer, ForeignKey("business_rules.id"), primary_key=True)
    
    # Rule application order
    execution_order = Column(Integer, default=0)
    
    # Relationships
    dataset = relationship("Dataset", back_populates="rules")
    rule = relationship("BusinessRule", back_populates="dataset_rules")
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert dataset rule to dictionary"""
        return {
            "dataset_id": self.dataset_id,
            "rule_id": self.rule_id,
            "execution_order": self.execution_order
        }
